Enter password: *************
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 13
Server version: 9.1.0 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> CREATE DATABASE IF NOT EXISTS school_management;
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql> CREATE DATABASE IF NOT EXISTS university_management;
Query OK, 1 row affected (0.01 sec)

mysql> USE university_management;
Database changed
mysql> CREATE TABLE IF NOT EXISTS student_groups (
    ->     id INT AUTO_INCREMENT PRIMARY KEY,
    ->     name VARCHAR(100) NOT NULL UNIQUE
    -> );
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE TABLE IF NOT EXISTS teachers (
    ->     id INT AUTO_INCREMENT PRIMARY KEY,
    ->     full_name VARCHAR(255) NOT NULL,
    ->     birth_date DATE NOT NULL,
    ->     contact_info TEXT,
    ->     UNIQUE (full_name, birth_date)
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE IF NOT EXISTS students (
    ->     id INT AUTO_INCREMENT PRIMARY KEY,
    ->     full_name VARCHAR(255) NOT NULL,
    ->     birth_date DATE NOT NULL,
    ->     contact_info TEXT,
    ->     group_id INT,
    ->     UNIQUE (full_name, birth_date),
    ->     FOREIGN KEY (group_id) REFERENCES student_groups(id)
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE IF NOT EXISTS subjects (
    ->     id INT AUTO_INCREMENT PRIMARY KEY,
    ->     name VARCHAR(255) NOT NULL UNIQUE,
    ->     teacher_id INT NOT NULL,
    ->     FOREIGN KEY (teacher_id) REFERENCES teachers(id)
    -> );
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE TABLE IF NOT EXISTS grades (
    ->     id INT AUTO_INCREMENT PRIMARY KEY,
    ->     student_id INT NOT NULL,
    ->     subject_id INT NOT NULL,
    ->     teacher_id INT NOT NULL,
    ->     grade INT CHECK (grade BETWEEN 1 AND 5),
    ->     date DATE NOT NULL,
    ->     FOREIGN KEY (student_id) REFERENCES students(id),
    ->     FOREIGN KEY (subject_id) REFERENCES subjects(id),
    ->     FOREIGN KEY (teacher_id) REFERENCES teachers(id)
    -> );
Query OK, 0 rows affected (0.04 sec)

mysql> INSERT INTO student_groups (name)
    -> VALUES ('Group A'), ('Group B'), ('Group C');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO teachers (full_name, birth_date, contact_info)
    -> VALUES
    -> ('John Smith', '1980-06-15', 'john.smith@example.com'),
    -> ('Mary Johnson', '1975-04-20', 'mary.johnson@example.com'),
    -> ('Alice Walker', '1985-11-02', 'alice.walker@example.com');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO students (full_name, birth_date, contact_info, group_id)
    -> VALUES
    -> ('Alice Brown', '2003-09-10', 'alice.brown@example.com', 1),
    -> ('Bob Green', '2002-07-22', 'bob.green@example.com', 1),
    -> ('Charlie White', '2004-01-30', 'charlie.white@example.com', 2),
    -> ('David Black', '2003-05-11', 'david.black@example.com', 3),
    -> ('Eva Gray', '2002-03-15', 'eva.gray@example.com', 3);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> INSERT INTO subjects (name, teacher_id)
    -> VALUES
    -> ('Mathematics', 1),
    -> ('History', 2),
    -> ('Physics', 3);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO grades (student_id, subject_id, teacher_id, grade, date)
    -> VALUES
    -> (1, 1, 1, 5, '2024-06-01'),
    -> (2, 1, 1, 4, '2024-06-01'),
    -> (3, 2, 2, 3, '2024-06-01'),
    -> (4, 1, 1, 5, '2024-06-01'),
    -> (5, 2, 2, 2, '2024-06-01'),
    -> (1, 3, 3, 4, '2024-06-01'),
    -> (2, 3, 3, 3, '2024-06-01'),
    -> (3, 1, 1, 3, '2024-07-01'),
    -> (4, 2, 2, 5, '2024-07-01'),
    -> (5, 3, 3, 4, '2024-07-01'),
    -> (1, 2, 2, 5, '2024-07-01'),
    -> (2, 2, 2, 4, '2024-07-01');
Query OK, 12 rows affected (0.01 sec)
Records: 12  Duplicates: 0  Warnings: 0

mysql> WITH math_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_math
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%Math%'
    ->     GROUP BY s.id
    -> ),
    -> humanities_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_humanities
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%History%'  -- или другой гуманитарный предмет
    ->     GROUP BY s.id
    -> )
    -> SELECT s.full_name
    -> FROM students s
    -> JOIN math_avg ma ON s.id = ma.id
    -> JOIN humanities_avg hu ON s.id = hu.id
    -> end;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'end' at line 21
mysql> WITH math_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_math
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%Math%'
    ->     GROUP BY s.id
    -> ),
    -> humanities_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_humanities
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%History%'  -- или другой гуманитарный предмет
    ->     GROUP BY s.id
    -> )
    -> SELECT s.full_name
    -> FROM students s
    -> JOIN math_avg ma ON s.id = ma.id
    -> JOIN humanities_avg hu ON s.id = hu.id
    -> WHERE ma.avg_math > 4 AND hu.avg_humanities < 3;
Empty set (0.00 sec)

mysql> -- Вставляем дополнительные оценки для студентов
Query OK, 0 rows affected (0.00 sec)

mysql> INSERT INTO grades (student_id, subject_id, teacher_id, grade, date)
    -> VALUES
    -> (1, 1, 1, 5, '2024-06-01'),  -- Студент 1 по математике - высокая оценка
    -> (1, 2, 2, 2, '2024-06-01'),  -- Студент 1 по истории - низкая оценка
    -> (2, 1, 1, 4, '2024-06-01'),  -- Студент 2 по математике - средняя оценка
    -> (2, 2, 2, 3, '2024-06-01'),  -- Студент 2 по истории - средняя оценка
    -> (3, 1, 1, 5, '2024-06-01'),  -- Студент 3 по математике - высокая оценка
    -> (3, 2, 2, 3, '2024-06-01');  -- Студент 3 по истории - средняя оценка
Query OK, 6 rows affected (0.01 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> WITH math_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_math
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%Math%'  -- Математические предметы
    ->     GROUP BY s.id
    -> ),
    -> humanities_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_humanities
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%History%'  -- Гуманитарные предметы
    ->     GROUP BY s.id
    -> )
    -> SELECT s.full_name
    -> FROM students s
    -> JOIN math_avg ma ON s.id = ma.id
    -> JOIN humanities_avg hu ON s.id = hu.id
    -> WHERE ma.avg_math > 4 AND hu.avg_humanities < 3;
Empty set (0.00 sec)

mysql> INSERT INTO grades (student_id, subject_id, teacher_id, grade, date)
    -> VALUES
    -> (1, 1, 1, 5, '2024-06-01'),  -- Студент 1 по математике - 5
    -> (1, 2, 2, 2, '2024-06-01'),  -- Студент 1 по истории - 2
    -> (2, 1, 1, 4, '2024-06-01'),  -- Студент 2 по математике - 4
    -> (2, 2, 2, 3, '2024-06-01'),  -- Студент 2 по истории - 3
    -> (3, 1, 1, 5, '2024-06-01'),  -- Студент 3 по математике - 5
    -> (3, 2, 2, 3, '2024-06-01');  -- Студент 3 по истории - 3
Query OK, 6 rows affected (0.00 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> WITH math_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_math
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%Math%'  -- Фильтруем только математические предметы
    ->     GROUP BY s.id
    -> ),
    -> humanities_avg AS (
    ->     SELECT s.id, AVG(g.grade) AS avg_humanities
    ->     FROM students s
    ->     JOIN grades g ON s.id = g.student_id
    ->     JOIN subjects sub ON g.subject_id = sub.id
    ->     WHERE sub.name LIKE '%History%'  -- Фильтруем только гуманитарные предметы
    ->     GROUP BY s.id
    -> )
    -> SELECT s.full_name
    -> FROM students s
    -> JOIN math_avg ma ON s.id = ma.id
    -> JOIN humanities_avg hu ON s.id = hu.id
    -> WHERE ma.avg_math > 4  -- Студенты с высоким баллом по математике
    ->   AND hu.avg_humanities < 3;  -- И низким баллом по гуманитарным предметам
Empty set (0.00 sec)

mysql> SELECT s.full_name, AVG(g.grade) AS avg_math
    -> FROM students s
    -> JOIN grades g ON s.id = g.student_id
    -> JOIN subjects sub ON g.subject_id = sub.id
    -> WHERE sub.name LIKE '%Math%'  -- Фильтруем только математические предметы
    -> GROUP BY s.id
    -> HAVING avg_math > 4;
+---------------+----------+
| full_name     | avg_math |
+---------------+----------+
| Alice Brown   |   5.0000 |
| David Black   |   5.0000 |
| Charlie White |   4.3333 |
+---------------+----------+
3 rows in set (0.00 sec)

mysql> SELECT s.full_name, AVG(g.grade) AS avg_humanities
    -> FROM students s
    -> JOIN grades g ON s.id = g.student_id
    -> JOIN subjects sub ON g.subject_id = sub.id
    -> WHERE sub.name LIKE '%History%'  -- Фильтруем только гуманитарные предметы
    -> GROUP BY s.id
    -> HAVING avg_humanities < 3;  -- Низкие оценки по гуманитарным предметам
+-----------+----------------+
| full_name | avg_humanities |
+-----------+----------------+
| Eva Gray  |         2.0000 |
+-----------+----------------+
1 row in set (0.00 sec)

mysql> SELECT sub.name, COUNT(g.id) AS count_twos
    -> FROM grades g
    -> JOIN subjects sub ON g.subject_id = sub.id
    -> WHERE g.grade = 2 AND g.date >= '2024-09-01'
    -> GROUP BY sub.name
    -> ORDER BY count_twos DESC
    -> LIMIT 1;
Empty set (0.00 sec)

mysql> WITH top_students AS (
    ->     SELECT g.student_id
    ->     FROM grades g
    ->     GROUP BY g.student_id
    ->     HAVING MIN(g.grade) = 5  -- Все экзамены с оценкой 5
    -> )
    -> SELECT s.full_name AS student_name, t.full_name AS teacher_name
    -> FROM top_students ts
    -> JOIN grades g ON ts.student_id = g.student_id
    -> JOIN teachers t ON g.teacher_id = t.id
    -> JOIN students s ON ts.student_id = s.id;
+--------------+--------------+
| student_name | teacher_name |
+--------------+--------------+
| David Black  | John Smith   |
| David Black  | Mary Johnson |
+--------------+--------------+
2 rows in set (0.00 sec)

mysql> SELECT s.full_name, EXTRACT(YEAR FROM g.date) AS year, AVG(g.grade) AS avg_grade
    -> FROM students s
    -> JOIN grades g ON s.id = g.student_id
    -> GROUP BY s.full_name, EXTRACT(YEAR FROM g.date)
    -> ORDER BY s.full_name, year;
+---------------+------+-----------+
| full_name     | year | avg_grade |
+---------------+------+-----------+
| Alice Brown   | 2024 |    4.0000 |
| Bob Green     | 2024 |    3.5714 |
| Charlie White | 2024 |    3.6667 |
| David Black   | 2024 |    5.0000 |
| Eva Gray      | 2024 |    3.0000 |
+---------------+------+-----------+
5 rows in set (0.00 sec)

mysql> -- Добавим оценки "2" для проверки
Query OK, 0 rows affected (0.00 sec)

mysql> INSERT INTO grades (student_id, subject_id, teacher_id, grade, date)
    -> VALUES
    -> (1, 1, 1, 2, '2024-09-05'),  -- Оценка 2 по математике
    -> (2, 1, 1, 2, '2024-09-06'),  -- Оценка 2 по математике
    -> (3, 2, 2, 2, '2024-09-10');  -- Оценка 2 по истории
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT sub.name, COUNT(g.id) AS count_twos
    -> FROM grades g
    -> JOIN subjects sub ON g.subject_id = sub.id
    -> WHERE g.grade = 2 AND g.date >= '2024-09-01'
    -> GROUP BY sub.name
    -> ORDER BY count_twos DESC
    -> LIMIT 1;
+-------------+------------+
| name        | count_twos |
+-------------+------------+
| Mathematics |          2 |
+-------------+------------+
1 row in set (0.00 sec)

mysql> SELECT g.name AS group_name, AVG(gr.grade) AS avg_group_grade
    -> FROM student_groups g
    -> JOIN students s ON g.id = s.group_id
    -> JOIN grades gr ON s.id = gr.student_id
    -> GROUP BY g.name
    -> ORDER BY avg_group_grade DESC;
+------------+-----------------+
| group_name | avg_group_grade |
+------------+-----------------+
| Group C    |          4.0000 |
| Group A    |          3.5625 |
| Group B    |          3.4286 |
+------------+-----------------+
3 rows in set (0.00 sec)

mysql> ^C
mysql> ;
ERROR:
No query specified

mysql> INSERT INTO students (full_name, birth_date, contact_info, group_id)
    -> VALUES ('John Doe', '2005-03-12', 'john.doe@example.com', 2);
Query OK, 1 row affected (0.00 sec)

mysql> UPDATE teachers
    -> SET contact_info = 'new_email@example.com'
    -> SET contact_info = 'new_email@example.com';
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'SET contact_info = 'new_email@example.com'' at line 3
mysql> UPDATE teachers
    -> SET contact_info = 'new_email@example.com'
    -> WHERE full_name = 'Mary Johnson';
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> DELETE FROM grades
    -> WHERE subject_id = 2;
Query OK, 12 rows affected (0.00 sec)

mysql>
mysql> DELETE FROM subjects
    -> WHERE id = 2;
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO grades (student_id, subject_id, teacher_id, grade, date)
    -> VALUES (1, 1, 1, 5, '2024-12-20');
Query OK, 1 row affected (0.00 sec)

mysql>
